version: 2
jobs:
  build:
    working_directory: ~/v1ceos-sls

    docker:
      - image: circleci/node:10.15

    steps:
      - checkout

      - restore_cache:
          key: v1ceos-sls-{{ checksum "package-lock.json" }}

      - run:
          name: Install dependencies
          command: |
            sudo npm i -g serverless
            npm install
            echo "pwd"
            pwd
            echo "... agora indo para o global modules"
            cd /usr/local/lib/node_modules
            ls
      - save_cache:
          key: v1ceos-sls-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules
#            - /usr/local/lib/node_modules/serverless

#      - persist_to_workspace:
#          root: /home/circleci
#          paths:
#            -

  test:
    working_directory: ~/v1ceos-sls

    docker:
      - image: circleci/node:10.15
    steps:
      - checkout
      - restore_cache:
          key: v1ceos-sls-{{ checksum "package-lock.json" }}
#      - attach_workspace:
#          at: /tmp/node_modules
      - run:
          name: run tests with code coverage
#          command: npm test --coverage
          command: |
            npm test --coverage

  deploy:
    working_directory: ~/v1ceos-sls

    docker:
      - image: circleci/node:10.15

    steps:
      - checkout
      - restore_cache:
            key: v1ceos-sls-{{ checksum "package-lock.json" }}
#      - run:
#          name: Install Serverless CLI
#          command: sudo npm i -g serverless

      - run:
          name: Logs
          command: |
            cd node_modules
            ls
            echo "mama"
            cd ..
            cd /usr/local/lib/node_modules
            echo "looking for global packages"
            ls
      - run:
          name: Deploy app
          command: sls deploy -v

      - save_cache:
          paths:
            - node_modules
          key: dependencies-cache-{{ checksum "package.json" }}

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build
      - test:
          requires:
            - build
      - deploy:
          requires:
            - test
#        filters:
#          branches:
#            only: master


